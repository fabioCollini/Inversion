/*
 * Copyright 2019 Fabio Collini.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.fabioCollini.inversion'

dependencies {
    implementation project(':inversionLib')

    implementation files(org.gradle.internal.jvm.Jvm.current().toolsJar)

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation 'com.google.auto.service:auto-service-annotations:1.0-rc6'
    kapt 'com.google.auto.service:auto-service:1.0-rc6'

    api 'com.squareup:kotlinpoet:1.5.0'
    implementation 'com.squareup:kotlinpoet-metadata:1.5.0'

    testImplementation 'junit:junit:4.13'
    testImplementation "org.permissionsdispatcher:kompile-testing:0.1.3"
}

sourceSets {
    main {
        java {
            srcDir "${buildDir.absolutePath}/tmp/kapt/main/kotlinGenerated/"
        }
    }
}

sourceCompatibility = "8"
targetCompatibility = "8"

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test.finalizedBy(jacocoTestReport)

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination = file("${buildDir}/reports/jacoco/report.xml")
        csv.enabled false
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xuse-experimental=kotlin.Experimental"
    }
}